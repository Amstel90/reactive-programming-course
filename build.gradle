buildscript {
    repositories {
        mavenCentral()
    }
}

def printOutput(def output) {
    return tasks.create("printOutput") {
        for (line in output.toString().readLines()) {
            println "#educational_plugin" + line
        }
    }
}

subprojects {
    apply plugin: 'application'
    apply plugin: 'java'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencies {
        compile platform('io.projectreactor:reactor-bom:Dysprosium-SR4')

        testCompile platform('org.junit:junit-bom:5.5.2')
        testCompile platform('io.projectreactor:reactor-bom:Dysprosium-SR4')
        testCompile 'ch.qos.logback:logback-core:1.2.3'
        testCompile 'ch.qos.logback:logback-classic:1.2.3'
        testCompile 'org.assertj:assertj-core:3.14.0'
        testCompile 'org.mockito:mockito-core:3.2.0'
        testCompile 'io.projectreactor:reactor-test'
        testCompile 'org.junit.jupiter:junit-jupiter-api'

        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    }

    sourceSets {
        main {
            java.srcDir 'src'
        }
        test {
            java.srcDir 'test'
        }
    }

    test {
        useJUnitPlatform()
    }

    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : ""

    def runOutput = new ByteArrayOutputStream()
    tasks.run.setStandardOutput(runOutput)
    tasks.run.doLast { printOutput(runOutput) }

    task cleanBuildDir(type: Delete) {
        delete "${projectDir}/out"
    }
    tasks.clean.dependsOn(cleanBuildDir)
}

project(':util') {
    dependencies {
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.5.2")
    }
}

configure(subprojects.findAll {it.name != 'util'}) {
  dependencies {
    compile project(':util').sourceSets.main.output
    testCompile project(':util').sourceSets.test.output
  }
}
